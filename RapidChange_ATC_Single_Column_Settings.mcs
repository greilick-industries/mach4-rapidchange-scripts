-----------------------------------------------------------------------------
-- Name:        RapidChange_ATC_SingleColumns_Settings.mcs
-- Purpose:     Create and adjust settings for RapidChange ATC on Mach4
-- Author:      Dennis Maude
-----------------------------------------------------------------------------

function GetNextID()
    m_id = m_id+1
    return m_id
end
--global var to hold the frame
frame = nil
panel = nil
m_id = 0
m_iniName = "RapidChangeATC"

-- constants
X_AXIS = 0
Y_AXIS = 1
A_AXIS = 3
B_AXIS = 4
C_AXIS = 5

NEGATIVE = 0
POSITIVE = 1

ADD_INPUT_CONTROL = 0
ADD_CHECK_CONTROL = 1
ADD_RADIO_CONTROL = 2
ADD_SELECT_CONTROL = 3
ADD_LISTBOX_CONTROL = 4
ADD_CHOICE_CONTROL = 5

settings = { 
    -- tool pockets
    { _number_of_pockets, "4" , "Count", {"4","6","8"}, ADD_SELECT_CONTROL },
    { _pocket_offset, 38 , "Offset", {}, ADD_INPUT_CONTROL },
    { _alignment ,X_AXIS, "Alignment", {"X Axis", "Y Axis"}, ADD_CHOICE_CONTROL },
    { _direction, POSITIVE, "Direction", {"Positive","Negative"}, ADD_CHOICE_CONTROL },
    
    -- magazine references
    { _x_pocket_1, "0.0000" , "X Pocket 1", {}, ADD_INPUT_CONTROL },
    { _y_pocket_1, "0.0000" , "Y Pocket 1", {}, ADD_INPUT_CONTROL },
    { _z_engage, "0.0000" , "Z Engage", {}, ADD_INPUT_CONTROL },
    { _z_traverse, "0.0000" , "Z Move To Load", {}, ADD_INPUT_CONTROL },
    { _z_safe_clearance, "0.0000" , "Z Safe Clearance", {}, ADD_INPUT_CONTROL },
    
    -- speeds and feeds
    { _engage_feed_rate, "250" , "Engage Feed Rate", {}, ADD_INPUT_CONTROL },
    { _load_rpm, "1500" , "Load RPM", {}, ADD_INPUT_CONTROL },
    { _unload_rpm, "1500" , "Unload RPM", {}, ADD_INPUT_CONTROL },

    -- enabled options
    { _dust_cover_enabled, 0 , "Dust Cover Enabled", {}, ADD_CHECK_CONTROL },
    { _tool_recognition_enabled, 0 , "Tool Recognition Enabled", {}, ADD_CHECK_CONTROL },
    { _tool_setter_enabled, 0 , "Tool Setter Enabled", {}, ADD_CHECK_CONTROL },

    -- tool touch off
    { _set_tool_offset, "0.0000" , "Set Tool Offset", {}, ADD_INPUT_CONTROL },
    { _seek_feed_rate, "250" , "Seek Feed Rate", {}, ADD_INPUT_CONTROL },
    { _seek_retreat, "10.00" , "Seek Retreat", {}, ADD_INPUT_CONTROL },
    { _set_feed_rate, "250" , "Set Feed Rate", {}, ADD_INPUT_CONTROL },
    { _set_tool_max_travel, "0.0000" , "Seek Max Distance", {}, ADD_INPUT_CONTROL },

    -- tool setter references
    { _x_tool_setter, "0.0000" , "X Tool Setter", {}, ADD_INPUT_CONTROL },
    { _y_tool_setter, "0.0000" , "Y Tool Setter", {}, ADD_INPUT_CONTROL },
    { _z_seek_start, "0.0000" , "Z Start Seek", {}, ADD_INPUT_CONTROL },
    { _z_safe_tool_setter, "0.0000" , "Z Move To Probe", {}, ADD_INPUT_CONTROL },

    -- dust cover
    { _dust_cover_axis, 3, "Axis", {"A Axis", "B Axis", "C Axis"}, ADD_CHOICE_CONTROL },
    { _dust_cover_open_position, "0.0000" , "Opened Position", {}, ADD_INPUT_CONTROL },
    { _dust_cover_closed_position, "0.0000" , "Closed Position", {}, ADD_INPUT_CONTROL },
    { _dust_cover_use_port, 0 , "Port", {}, ADD_INPUT_CONTROL },
    { _dust_cover_pin, 0 , "Pin", {}, ADD_INPUT_CONTROL },
    
    -- tool recognition
    { _z_tool_recognition_zone_1, 0 , "Z Zone 1", {}, ADD_INPUT_CONTROL },
    { _z_tool_recognition_zone_2, 0 , "Z Zone 2", {}, ADD_INPUT_CONTROL },
    { _tool_recognition_port, 0 , "Port", {}, ADD_INPUT_CONTROL },
    { _tool_recognition_pin, 0 , "Pin", {}, ADD_INPUT_CONTROL }

}

function main()
    AddControlLib = {
        [ADD_INPUT_CONTROL] = function (sizer, id, value, name_string, selections, width)
            local staticText = wx.wxStaticText( frame, wx.wxID_ANY, name_string)
            local Ctrl   = wx.wxTextCtrl( frame, 1, tostring(value), wx.wxDefaultPosition, wx.wxSize(width, -1), wx.wxTE_PROCESS_ENTER , wx.wxTextValidator(wx.wxFILTER_NUMERIC))
            
            sizer:Add(staticText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL+wx.wxALIGN_RIGHT, 2)
            sizer:Add(Ctrl,   0, wx.wxGROW+wx.wxALIGN_CENTER+wx.wxALL+wx.wxALIGN_LEFT, 2)
            
            return textCtrl, id
        end,
        [ADD_CHECK_CONTROL] = function (sizer, id, value, name_string, selections, width)
            local staticText = wx.wxStaticText( frame, wx.wxID_ANY, name_string)
            local Ctrl   = wx.wxCheckBox( frame, id, "", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_PROCESS_ENTER , wx.wxTextValidator(wx.wxFILTER_NUMERIC))
            
            sizer:Add( staticText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL+wx.wxALIGN_RIGHT, 2)
            sizer:Add( Ctrl,   0, wx.wxGROW+wx.wxALIGN_CENTER+wx.wxALL+wx.wxALIGN_LEFT, 2)
            
            return Ctrl, id
        end,
        [ADD_RADIO_CONTROL] = function (sizer, id, value, name_string, selections, width)
            local staticText = wx.wxBoxSizer( wx.wxHORIZONTAL ) -- this one just adds an empty box
            local Ctrl   = wx.wxRadioButton( frame, id, name_string, wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_PROCESS_ENTER , wx.wxTextValidator(wx.wxFILTER_NUMERIC))
            --local radioBox = wx.wxRadioBox(frame, id, "wxRadioBox", wx.wxDefaultPosition, wx.wxDefaultSize, choices, 1, wx.wxRA_SPECIFY_ROWS)
            
            sizer:Add( staticText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL+wx.wxALIGN_RIGHT, 2)
            sizer:Add( Ctrl,   0, wx.wxGROW+wx.wxALIGN_CENTER+wx.wxALL+wx.wxALIGN_LEFT, 2)
            
            return Ctrl, id
        end,
        [ADD_SELECT_CONTROL] = function (sizer, id, value, name_string, selections, width)
            local staticText = wx.wxStaticText( frame, wx.wxID_ANY, name_string)
            local Ctrl   = wx.wxComboBox(frame, id, value, wx.wxDefaultPosition, wx.wxSize(width, -1), selections)
            
            sizer:Add( staticText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL+wx.wxALIGN_RIGHT, 2)
            sizer:Add( Ctrl,   0, wx.wxGROW+wx.wxALIGN_CENTER+wx.wxALL+wx.wxALIGN_LEFT, 2)
            
            return Ctrl, id
        end,
        [ADD_LISTBOX_CONTROL] = function (sizer, id, value, name_string, selections, width)
            local staticText = wx.wxStaticText( frame, wx.wxID_ANY, name_string)
            --local Ctrl = wx.wxListBox(frame, id, wx.wxDefaultPosition, wx.wxSize(width, -1), selections)
            local Ctrl   = wx.wxComboBox(frame, id, "", wx.wxDefaultPosition, wx.wxSize(width, -1), selections)
            
            sizer:Add( staticText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL+wx.wxALIGN_RIGHT, 2)
            sizer:Add( Ctrl,   0, wx.wxGROW+wx.wxALIGN_CENTER+wx.wxALL+wx.wxALIGN_LEFT, 2)
            
            return Ctrl, id
        end,
        [ADD_CHOICE_CONTROL] = function (sizer, id, value, name_string, selections, width)
            local staticText = wx.wxStaticText( frame, wx.wxID_ANY, name_string)
            local Ctrl = wx.wxChoice(frame, id, wx.wxDefaultPosition, wx.wxDefaultSize, selections)
            
            sizer:Add( staticText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL+wx.wxALIGN_RIGHT, 2)
            sizer:Add( Ctrl,   0, wx.wxGROW+wx.wxALIGN_CENTER+wx.wxALL+wx.wxALIGN_LEFT, 2)
            
            return Ctrl, id
        end
    }

    frame = wx.wxFrame (wx.NULL, wx.wxID_ANY, "RapidChangeATC", wx.wxDefaultPosition, wx.wxSize( 900, 250 ), wx.wxDEFAULT_FRAME_STYLE+wx.wxTAB_TRAVERSAL+wx.wxSTAY_ON_TOP )
    frame:SetSizeHints( wx.wxDefaultSize, wx.wxDefaultSize )

    --bSizer1 = wx.wxBoxSizer(
    fgSizer1 = wx.wxFlexGridSizer( 0, 2, 0, 0 )
    --fgSizer1:AddGrowableCol( 0 )
    
    for i = 1,#settings do
        --sizer, id, name_string, value, width
        local functionToCall = settings[i][5] and tonumber(settings[i][5]) or settings[i][5]
        if (AddControlLib[functionToCall]) then
            setting = AddControlLib[functionToCall](
                fgSizer1, --sizer
                i, --GetNextID(), --id
                settings[i][2], -- value
                tostring(settings[i][3]), -- name_string
                settings[i][4], -- selections
                tonumber(100) -- width
            )
        end
    end

    --bSizer1:Add( fgSizer1, 1, wx.wxEXPAND, 5 )

    frame:Connect( wx.wxEVT_CLOSE_WINDOW, function(event)
        --implements On Close To save Settings
        --mc.mcProfileWriteString(inst, "MapSurface", "XMax", string.format("%.4f", tonumber(UI.m_textCtrlXMax:GetValue() )));	
        event:Skip()
	end )

    frame:SetSizer( fgSizer1 )
    fgSizer1:Fit(frame)
    
    frame:Show(true)

end

main()

wx.wxGetApp():MainLoop()