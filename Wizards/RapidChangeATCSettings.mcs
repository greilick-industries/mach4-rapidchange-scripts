local inst = mc.mcGetInstance()

machDir = mc.mcCntlGetMachDir(inst)
package.path = machDir .. "\\Modules\\RapidChangeATC\\Core\\?.lua;" .. machDir .. "\\Modules\\RapidChangeATC\\Core\\?.mcc"

if package.loaded.RapidChangeConstants == nil then rcConstants = require "RapidChangeConstants" end
if package.loaded.RapidChangeSettings == nil then rcSettings = require "RapidChangeSettings" end

local k = rcConstants

function GetNextID()
    m_id = m_id+1
    return m_id
end
--global var to hold the frame
frame = nil
panel = nil
m_id = 0
m_iniName = "RapidChangeATC"

settings = nil
storedSettings = {}

function CreateUISetting(id, setting)
	storedSettings[id] = setting
end

function OnUpdateUISettingValue(id, value)
	
	storedSettings[id].value = tonumber(value)
	
	local s = string.format("id: %i, value: %s", id, tostring(storedSettings[id].value))
	frame:SetStatusText(s, 0)
	
end

function OnUpdateUISettingSelectedIndex(id, selectedIndex)
	
	storedSettings[id].value = selectedIndex
	storedSettings[id].selectedIndex = selectedIndex
	
	local s = string.format("id: %i, value: %i", id, storedSettings[id].value)
	frame:SetStatusText(s, 0)
	
end

function OnUpdateUISettingIsChecked(id, isChecked)
	
	storedSettings[id].value = isChecked
	
	local s = string.format("id: %i, value: %i", id, storedSettings[id].value)
	frame:SetStatusText(s, 0)
	
end

function UISaveSettings()
	frame:SetStatusText("Saving...", 0)
	for _, v in pairs(storedSettings) do
		rcSettings.SetValue(v.key, v.value)
	end
	frame:SetStatusText("Settings Saved", 0)
end


function CreateOneColumnInput(txt, cntrl)
	
	-- txt might be used later
	local s = wx.wxBoxSizer( wx.wxVERTICAL )
	
	s:Add(cntrl, 1, wx.wxCENTER, 5)
	
	s:SetMinSize(250,30) -- force it to be some reasonable size
	
	return s
	
end

function CreateTwoColumnInput(txt, cntrl)
	
	local s = wx.wxGridSizer(0,2,5,5)
	local t = wx.wxStaticText(panel, wx.wxID_ANY, tostring(txt))
	
	s:Add(t, 1, wx.wxCENTER, 5)
	s:Add(cntrl, 1, wx.wxCENTER, 5)
	
	s:SetMinSize(250,30) -- force it to be some reasonable size
	
	return s
	
end

AddUIControl = {
		[k.INPUT_CONTROL] = function(setting)
			id = GetNextID()
			local label = tostring(setting.label)
			local iCtrl = wx.wxTextCtrl(panel, id, tostring(setting.value), wx.wxDefaultPosition, wx.wxSize(125,25), wx.wxTE_PROCESS_ENTER)
			local iSizer = CreateTwoColumnInput(label, iCtrl)
			panel:Connect( id, wx.wxEVT_COMMAND_TEXT_UPDATED, 
				function(event)
					OnUpdateUISettingValue( event:GetId(),iCtrl:GetValue() ) 
				end
			)
			return id, iSizer, iCtrl
		end,
		[k.CHECK_CONTROL] = function(setting)
			local id = GetNextID()
			local label = tostring(setting.label)
			local iCtrl = wx.wxCheckBox(panel, id, label, wx.wxDefaultPosition, wx.wxDefaultSize)
			iCtrl:SetValue(setting.value)
			local iSizer = CreateOneColumnInput(label, iCtrl)
			panel:Connect( id, wx.wxEVT_COMMAND_CHECKBOX_CLICKED, 
				function(event)
					OnUpdateUISettingIsChecked( event:GetId(),iCtrl:isChecked() ) 
				end
			)
			return id, iSizer, iCtrl
		end,
		[k.RADIO_CONTROL] = function(setting)
			local id = GetNextID()
			local label = tostring(setting.label)
			local iCtrl = wx.wxRadioBox(panel, id, label, wx.wxDefaultPosition, wx.wxDefaultSize)
			iCtrl:SetValue(setting.value)
			local iSizer = CreateOneColumnInput(label, iCtrl)
			panel:Connect( id, wx.wxEVT_COMMAND_RADIOBOX_SELECTED, 
				function(event)
					OnUpdateUISettingIsChecked( event:GetId(),iCtrl:isChecked() ) 
				end
			)
			return id, iSizer, iCtrl
		end,
		[k.SELECT_CONTROL] = function(setting)
			return AddUIControl[k.CHOICE_CONTROL] ( setting )
		end,
		[k.LISTBOX_CONTROL] = function(setting)
			local id = GetNextID()
			local label = tostring(setting.label)
			local iCtrl = wx.wxListBox(panel, id, wx.wxDefaultPosition, wx.wxSize(125,#setting.optionLabels*25), setting.optionLabels)
			iCtrl:SetSelection(setting.value)
			local iSizer = CreateTwoColumnInput(label, iCtrl)
			panel:Connect( id, wx.wxEVT_COMMAND_LISTBOX_SELECTED, 
				function(event)
					OnUpdateUISettingSelectedIndex( event:GetId(), iCtrl:GetSelection() ) 
				end
			)
			return id, iSizer, iCtrl
		end,
		[k.CHOICE_CONTROL] = function(setting)
			local id = GetNextID()
			local label = tostring(setting.label)
			local iCtrl = wx.wxChoice(panel, id, wx.wxDefaultPosition, wx.wxSize(125,25), setting.optionLabels)
			iCtrl:SetSelection(setting.value)
			local iSizer = CreateTwoColumnInput(label, iCtrl)
			panel:Connect( id, wx.wxEVT_COMMAND_CHOICE_SELECTED, 
				function(event)
					OnUpdateUISettingSelectedIndex( event:GetId(), iCtrl:GetSelection() ) 
				end
			)
			return id, iSizer, iCtrl
		end,
		[k.SPIN_CONTROL] = function(setting)
			local id = GetNextID()
			local label = tostring(setting.label)
			local iCtrl = wx.wxSpinCtrl(panel, id, label, wx.wxDefaultPosition, wx.wxSize(125,25))
			iCtrl:SetRange(0,12)
			iCtrl:SetValue(setting.value)
			local iSizer = CreateTwoColumnInput(label, iCtrl) 
			panel:Connect( id, wx.wxEVT_COMMAND_SPINCTRL_UPDATED,
				function(event)
					OnUpdateUISettingValue( event:GetId(),iCtrl:GetValue() ) 
				end
			)
			return id, iSizer, iCtrl
		end
}

AddUISetting = {

	[k.DISTANCE_SETTING] = 	function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.UDISTANCE_SETTING] = function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.FEED_SETTING] =  	function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.RPM_SETTING] =  		function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.MCODE_SETTING] =  	function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.OPTION_SETTING] =  	function( setting )
		local sCntrlType = k.CHOICE_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.SWITCH_SETTING] =  	function( setting )
		local sCntrlType = k.CHECK_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.COUNT_SETTING] =  	function( setting )
		local sCntrlType = k.SPIN_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	--[[
	[k.PORT_SETTING] =  	function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	[k.PIN_SETTING] =  	function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end,
	]]
	[k.DWELL_SETTING] =  	function( setting )
		local sCntrlType = k.INPUT_CONTROL
		local id, sSizer, sCntrl = AddUIControl[sCntrlType] ( setting )
		return id, sSizer, sCntrl, sCntrlType
	end
		
}

function main()
	
	frame = wx.wxFrame(wx.NULL, wx.wxID_ANY,  m_iniName .. " Settings Wizard")
	
	frame:Connect(wx.wxEVT_CLOSE_WINDOW,
		function(event)
			event:Skip()
		end
	)
	
	local fileMenu = wx.wxMenu()
	ID_SAVE = GetNextID()
	fileMenu:Append(ID_SAVE, "&Save", "Save settings")
	fileMenu:AppendSeparator()
	
	ID_SAVE_EXIT = GetNextID()
    fileMenu:Append(ID_SAVE_EXIT, "Save & exit", "Save settings and exit")
    fileMenu:AppendSeparator()
    
	fileMenu:Append(wx.wxID_EXIT, "E&xit", "Quit without saving")

    local helpMenu = wx.wxMenu()
    helpMenu:Append(wx.wxID_ABOUT, "&About", "About RapidChange ATC Settings Wizard")

    local menuBar = wx.wxMenuBar()
    menuBar:Append(fileMenu, "&File")
    menuBar:Append(helpMenu, "&Help")
    frame:SetMenuBar(menuBar)

    frame:CreateStatusBar(1)
    frame:SetStatusText("RapidChangeATC Settings Wizard", 0)
	
    frame:Connect(ID_SAVE, wx.wxEVT_COMMAND_MENU_SELECTED,
		function (event) 
			UISaveSettings()
			--rcSettings.SaveUISettings()
		end
	)
	
	frame:Connect(ID_SAVE_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,
		function (event) 
			UISaveSettings()
			--rcSettings.SaveUISettings()
			--rcSettings.UnregisterUIControls()
			frame:Close(true)
		end
	)

    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,
		function (event)
			--rcSettings.UnregisterUIControls()
			frame:Close(true)
		end
	)

    -- connect the selection event of the about menu item
    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,
        function (event)
            wx.wxMessageBox('Single column version of RapidChange ATC Settings Wizard\n'  ..
                            'Be careful as there is no data validation if you enter incorrect values.',
                            "About RapidChange ATC Settings Wizard",
                            wx.wxOK + wx.wxICON_INFORMATION,
                            frame)
        end
	)
	
	panel = wx.wxScrolledWindow( frame, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxHSCROLL + wx.wxVSCROLL )
	panel:SetScrollRate( 5, 5 )
	
	sizer = wx.wxBoxSizer( wx.wxVERTICAL )
	
	settings = rcSettings.GetUISettingsList()
	
	for i=1,#settings do
		
		local setting = settings[i] 
		local id, s, uiControl, uiControlType = AddUISetting[setting.settingType ]( setting )
		
		sizer:Add(s, 0, wx.wxCENTER, 5)
		
		CreateUISetting(id, setting)
	
	end
	
	--UISaveSettings()
	
	panel:SetSizer( sizer )
	panel:Layout()
	sizer:Fit( panel )
	frame:SetMinSize(wx.wxSize(300,750))
	frame:Show()
	
end

main()

wx.wxGetApp():MainLoop()